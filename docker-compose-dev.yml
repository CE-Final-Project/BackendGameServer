version: '3.9'
services:
  gateway_service:
    container_name: gateway_service
    image: kenta420/dev-backend-game-server-gateway_service:latest
    networks:
      - game_server
    environment:
      TZ: "Asia/Bangkok"
    ports:
      - "8001:8001"
  auth_service:
    container_name: auth_service
    image: kenta420/dev-backend-game-server-auth_service
    networks:
      - game_server
    depends_on:
      - gateway_service
    environment:
      TZ: "Asia/Bangkok"
    ports:
      - "5003:5003"
  account_service:
    container_name: "account_service"
    image: kenta420/dev-backend-game-server-account_service
    networks:
      - game_server
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      TZ: "Asia/Bangkok"
    ports:
      - "5004:5004"
  database:
    container_name: postgres_game_db
    image: postgres:14-alpine
    networks:
      - game_server
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./init_db_script/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      TZ: "Asia/Bangkok"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "2iNyADya#bUu9"
      POSTGRES_DB: "root"
  database_admin:
    container_name: postgres_game_admin
    image: dpage/pgadmin4:6
    ports:
      - "9000:80"
    networks:
      - game_server
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@kmitl.ac.th"
      PGADMIN_DEFAULT_PASSWORD: "s8KHf^fLFWHppKtUJf7VtTE"
  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    networks:
      - game_server
    volumes:
      - ./zookeeper/data:/data
      - ./zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:7.0.5.arm64
    container_name: kafka
    networks:
      - game_server
    ports:
      - "9092:9092"
      - "9999:9999"
    volumes:
      - ./kafka:/var/lib/kafka/data
    environment:
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-host.docker.internal}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_JMX_PORT: 9999
        KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-host.docker.internal}
    depends_on:
      - zookeeper
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - game_server
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./redis/data:/data
      - ./redis/config/redis.conf:/redis.conf
    command: redis-server /redis.conf
  nginx:
    image: jc21/nginx-proxy-manager
    container_name: nginx
    restart: unless-stopped
    ports:
      - '8080:80'
      - '8081:81'
      - '8443:443'
    networks:
      - game_server
    volumes:
      - ./nginx/data:/data
      - ./nginx/letsencrypt:/etc/letsencrypt

networks:
  game_server:
    name: game_server